Create a virtual enviroment:
python -m venv dj
source dj/bin/activate

# Following Along to Tech with Tim Django Series #

download django
pip install django

create project:
django-admin startproject mysite
then cd to project
then runserver:
python3 manage.py runserver

create App:
python3 manage.py startapp cybrprjap
python -m pip freeze -> shows show only used packages
run server -> python3 manage.py runserver

# An app is what will have pages and views and represent your site. Whereas the project is kind of an environment that runs your app!

* Urls.py in main is what connects to the different view page of main/views.py
* if user doesn't put anything in the url it automatically redirects to the home page of views.index
* In the project url part an empty path is your default page - like a landing page
* In the project setting file, adding main.apps. MainConfig under the installed apps,
tells django to look for apps in main folder and configured and updated when modifications are made.
*path("<int:id>", views.index, name="index") id of list
path("<str:name>", views.index, name="index") name of list

Model.py
defines your data models corresponding to a table in the database. the attributes of the model contributes to fields within the table.
 Each model class represents a single table in the database.
  - it has a field definition: ToDoList class, name is a field of type CharField, which means it will store string data with a maximum length of 200 characters.
  - string representation: __str___ method:  defines how the model instance is represented as a string
 Making a migration is similar to adding to staging area like version control. such that we make a change and then we can apply change to our project
'python3 manage.py makemigrations main' creates change
'python3 manage.py migrate' to apply change

if you don't put a string method inside to do list, when doing ToDoList.objects.get(id=1) we wouldn't get the name of our list, rather the memory address.

Views
def index(response, id):
    ls = ToDoList.objects.get(id=id)
    return HttpResponse(f"<h1>{ls.name}</h1>") enter the id of list

     ls = ToDoList.objects.get(name=name)
    item = ls.item_set.get()
    return HttpResponse("<h1>%s</h1><br></br><p>%s</p>" % (ls.name, str(item.text) list name


Adding Object:
create todo list to add to add to database
python manage.py shell
from cybr.models import Task, ToDoList
t = ToDoList.objects
t = ToDoList(name=" ")
t.save()
ToDoList.objects.all() # shows lists

ToDoList.objects.get(id=1)
ToDoList: Tim's List â€º
>>> ToDoList.objects.get(name="Tim's List")
<ToDoList: Tim's List>

Creating Item:
ct.task_set.all() # give set of item
ct.task_set.create(text=" ", complete=False)